{"version":3,"sources":["services/grid-template.service.ts","components/ActionButton/index.tsx","components/ActionButton/use-event.effect.ts","components/FinalScoreRows/index.tsx","components/GameWord/index.tsx","components/GuessWordRow/index.tsx","components/TheirWord/reducer.tsx","components/TheirWord/index.tsx","components/YourWord/reducer.tsx","components/YourWord/services/guess-word-scorer.service.ts","components/YourWord/index.tsx","components/TabPanels/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["GUESS_WORD_LENGTHS","useStyles","makeStyles","theme","createStyles","fab","margin","spacing","position","right","extendedIcon","marginRight","ActionButton","PropTypes","string","isRequired","func","shape","type","maxLength","number","listener","options","action","dispatch","textFieldType","React","useState","openDialog","setOpenDialog","word","setWord","wordLengthError","setWordLengthError","score","setScore","useTheme","classes","transitionDuration","enter","transitions","duration","enteringScreen","exit","leavingScreen","hasFocus","setHasFocus","hasResize","setHasResize","useEffect","window","addEventListener","removeEventListener","document","activeElement","scrollIntoView","behavior","block","Zoom","key","in","timeout","style","transitionDelay","unmountOnExit","Fab","variant","aria-label","color","className","onClick","Dialog","open","onClose","aria-labelledby","DialogTitle","id","DialogContent","TextField","autoComplete","autoFocus","fullWidth","error","label","inputProps","undefined","helperText","onChange","event","target","value","toUpperCase","length","Number","parseInt","onFocus","DialogActions","Button","FinalScoreRows","arrayOf","scores","actualWordLength","bonusScore","finalScore","reduce","sum","currentValue","colSpan","GameWord","actualWord","actualLetters","split","map","actualLetter","actualLetterIndex","emptyCell","getEmptyCells","Array","fill","GuessWordRow","rowIndex","guessWord","guessWordScore","getNumberOfEmptyCells","before","after","letters","concat","isGuessLetter","letterIndex","letter","stages","initialState","currentStage","guessWords","guessWordScores","getStageIndex","stage","indexOf","reducer","state","currentStageIndex","NUMBER_OF_GUESSES","getTextFieldType","includes","stageIndex","TheirWord","useReducer","_","getGuessWordRow","guessWordStartIndex","guessLetter","guessLetterIndex","remainingGuessLetter","getGuessWordScore","YourWord","getTabId","panel","getTabPanelId","tabProps","toLowerCase","replace","tabPanelProps","TabPanels","tabValue","setTabValue","AppBar","Tabs","newValue","indicatorColor","textColor","Tab","enableMouseEvents","index","onChangeIndex","hidden","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","querySelector","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"8RAIaA,G,MAAqB,EAAE,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,I,mHCUrEC,EAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXC,IAAK,CACHC,OAAQH,EAAMI,QAAQ,GACtBC,SAAU,WACVC,MAAON,EAAMI,QAAQ,IAEvBG,aAAc,CACZC,YAAaR,EAAMI,QAAQ,SA8B3BK,GAvBIC,IAAUC,OAAOC,WAGfF,IAAUG,KAAKD,WAGVF,IAAUI,MAAM,CAE7BC,KAAML,IAAUC,OAAOC,WAGvBI,UAAWN,IAAUO,SACpBL,WAWiC,SAAC,GAAyC,IC1C9EG,EACAG,EACAC,EDwCuCC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,cAAoB,EACzCC,IAAMC,UAAS,GAD0B,mBACtEC,EADsE,KAC1DC,EAD0D,OAErDH,IAAMC,SAAS,IAFsC,mBAEtEG,EAFsE,KAEhEC,EAFgE,OAG/BL,IAAMC,UAAS,GAHgB,mBAGtEK,EAHsE,KAGrDC,EAHqD,OAInDP,IAAMC,SAAS,GAJoC,mBAItEO,EAJsE,KAI/DC,EAJ+D,KAOvEhC,EAAQiC,cACRC,EAAUpC,IAEVqC,EAAqB,CACzBC,MAAOpC,EAAMqC,YAAYC,SAASC,eAClCC,KAAMxC,EAAMqC,YAAYC,SAASG,eAZ0C,EAgB7ClB,IAAMC,UAAS,GAhB8B,mBAgBtEkB,EAhBsE,KAgB5DC,EAhB4D,OAiB3CpB,IAAMC,UAAS,GAjB4B,mBAiBtEoB,EAjBsE,KAiB3DC,EAjB2D,KC1C7E9B,ED4DS,SC3DTG,ED2DmB,kBAAM2B,GAAa,ICxDtCC,qBAAU,WAKR,OAHAC,OAAOC,iBAAiBjC,EAAMG,EAAUC,GAGjC,WACL4B,OAAOE,oBAAoBlC,EAAMG,ODmDrCK,IAAMuB,WAAU,WACc,IAAD,IAAvBJ,GAAYE,IACN,QAAR,EAAAM,gBAAA,mBAAUC,qBAAV,SAAyBC,eAAe,CAAEC,SAAU,SAAUC,MAAO,WACrEX,GAAY,GACZE,GAAa,MAEd,CAACH,EAAUE,IAgBd,OACE,oCACc,QAAXxB,GACC,kBAACmC,EAAA,EAAD,CACEC,IAvCM,UAwCNC,IArCQ,EAsCRC,QAASvB,EACTwB,MAAO,CAAEC,gBAAgB,GAAD,OAAezB,EAAmBK,KAAlC,OACxBqB,eAAa,GAEb,kBAACC,EAAA,EAAD,CACEC,QAAQ,WACRC,aAAA,YAAiB5C,GACjB6C,MAhDI,UAiDJC,UAAWhC,EAAQhC,IACnBiE,QAAS,kBAAMzC,GAAc,KAE7B,kBAAC,IAAD,CAASwC,UAAWhC,EAAQ3B,eAP9B,IAOgDa,IAIpD,kBAACgD,EAAA,EAAD,CAAQC,KAAM5C,EAAY6C,QAAS,kBAAM5C,GAAc,IAAQ6C,kBAAgB,qBAC7E,kBAACC,EAAA,EAAD,CAAaC,GAAG,qBAAhB,OAAyCrD,GACzC,kBAACsD,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEF,GAAG,OACHtE,OAAO,QACPyE,aAAa,MACbC,WAAS,EACTC,WAAS,EACTC,MAAOlD,EACPmD,MAAO5D,EACPL,KAAMO,EAAcP,KACpBkE,WAAY3D,EAAcN,UAAY,CAAEA,UAAWM,EAAcN,gBAAckE,EAC/EC,WAAY7D,EAAcN,UAAd,sBAAyCM,EAAcN,WAAc,GACjFoE,SA5CO,SAACC,GACW,SAAvB/D,EAAcP,MAChBa,EAAQyD,EAAMC,OAAOC,MAAMC,eAC3B1D,EAAmBuD,EAAMC,OAAOC,MAAME,SAAWnE,EAAcN,YAC/B,WAAvBM,EAAcP,MACvBiB,EAAS0D,OAAOC,SAASN,EAAMC,OAAOC,MAAO,MAwCvCK,QAAS,kBAAMjD,GAAY,OAG/B,kBAACkD,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQ3B,QAAS,kBAAMzC,GAAc,IAAQuC,MAAM,WAAnD,UAGA,kBAAC6B,EAAA,EAAD,CAAQ3B,QAzDY,WACH,SAAvB7C,EAAcP,KAAkBM,EAAS,CAAEN,KAAM,WAAYY,SAAUN,EAAS,CAAEN,KAAM,YAAagB,UACrGL,GAAc,IAuD8BuC,MAAM,WAA5C,WEtHJ8B,GAbIrF,IAAUsF,QAAQtF,IAAUO,OAAOL,YAAYA,WAGrCF,IAAUO,OAAOL,WAUG,SAAC,GAAkC,IAAhCqF,EAA+B,EAA/BA,OAAQC,EAAuB,EAAvBA,iBAC3CC,EAAaF,EAAOA,EAAOR,OAAS,KAA0B,IAAnBS,EAA0B,IAAO,EAC5EE,EAAaH,EAAOI,QAAO,SAACC,EAAKC,GAAN,OAAuBD,EAAMC,IAAc,GAE5E,OACE,oCACE,4BACE,wBAAIC,QAASN,GAAb,iBACA,4BAAKC,IAEP,4BACE,wBAAIK,QAASN,GAAb,gBACA,4BAAKE,IAEP,kCCjBAK,GAVQ/F,IAAUC,OAUU,SAAC,GAAoB,IAAlB+F,EAAiB,EAAjBA,WAC7BC,EAAa,OAAGD,QAAH,IAAGA,OAAH,EAAGA,EAAYE,MAAM,IAExC,OACE,mCACGD,QADH,IACGA,OADH,EACGA,EAAeE,KAAI,SAACC,EAAcC,GAAf,OAClB,wBAAIvD,IAAG,iBAAYuD,IAAsBD,SCO3CE,EAAY,sCACZC,EAAgB,SAACxB,GAAD,OAAoB,IAAIyB,MAAMzB,GAAQ0B,KAAKH,IAuB3DI,GAnBM1G,IAAUO,OAAOL,WAGTF,IAAUO,OAAOL,WAGxBF,IAAUC,OAGLD,IAAUO,OAUU,SAAC,GAA+D,IAA7DiF,EAA4D,EAA5DA,iBAAkBmB,EAA0C,EAA1CA,SAAUC,EAAgC,EAAhCA,UAAWC,EAAqB,EAArBA,eAAqB,EAxCvE,SAACF,GAC7B,MAAO,CACL,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,IACJA,GA4BsBG,CAAsBH,GADqD,mBAC5FI,EAD4F,KACpFC,EADoF,KAE7FC,EAAUV,EAAcQ,GAC3BG,QAAgB,OAATN,QAAS,IAATA,OAAA,EAAAA,EAAWV,MAAM,MAAOK,EAAcf,EAAmBwB,IAChEE,OAAOX,EAAcS,IAElBG,EAAgB,SAACC,GAAD,OAAyBL,GAAUK,GAAeA,EAAc5B,EAAmBwB,GAEzG,OACE,4BACGC,EAAQd,KAAI,SAACkB,EAAgBD,GAC5B,IAAMtE,EAAG,iBAAa6D,EAAb,YAAyBS,GAClC,OACE,wBAAItE,IAAKA,EAAKU,UAAW2D,EAAcC,GAAe,mBAAgB5C,GACnE6C,GAAUf,MAIjB,4BAAKO,M,gBCtELS,EAAS,CACb,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,gBACA,gBACA,gBACA,gBACA,OAGWC,EAAe,CAC1BC,aAAcF,EAAO,GACrBtB,WAAY,GACZyB,WAAY,GACZC,gBAAiB,IAGNC,EAAgB,SAACC,GAAD,OAAmBN,EAAOO,QAAQD,IAIlDE,EAAU,SAACC,EAA4BrH,GAClD,IAAMsH,EAAoBL,EAAcI,EAAMP,cAC9C,MAAoB,aAAhB9G,EAAOL,KACF,eACF0H,EADL,CAEEN,WAAW,GAAD,mBAAMM,EAAMN,YAAZ,CAAwB/G,EAAOO,OACzCuG,aAAcF,EAAOU,EAAoB,KAIzB,cAAhBtH,EAAOL,KACF,eACF0H,EADL,CAEEL,gBAAgB,GAAD,mBAAMK,EAAML,iBAAZ,CAA6BhH,EAAOW,QACnDmG,aAAcF,EAAOU,EAAoB,KAItCD,GC7CHE,EAAoB,IAAIzB,MAAM,IAAIC,KAAK,MA+BvCyB,EAAmB,SAAC1C,EAA0BgC,GAClD,GAAIA,EAAaW,SAAS,cAAe,CACvC,IAAMC,EAAaT,EAAcH,GAEjC,MAAO,CAAEnH,KAAM,OAAQC,UADLkF,EAAmBrG,EAAmBiJ,EAAa,IAIvE,MAAO,CAAE/H,KAAM,WAeXgI,GAVcrI,IAAUO,OAAOL,WAUF,SAAC,GAA0B,IAAxBsF,EAAuB,EAAvBA,iBAAuB,EACjC3E,IAAMyH,WAAWR,EAASP,GADO,mBACpDQ,EADoD,KAC7CpH,EAD6C,KAG3D,OACE,oCACE,2BAAO6C,UAAU,aACf,+BACE,kBAAC,EAAD,CAAUwC,WAAW,WACpBiC,EAAkB9B,IAnDL,SAACX,EAA0BiC,EAAsBC,GAAjD,OAA+E,SACrGa,EACA5B,GAFqG,OAIrG,kBAAC,EAAD,CAEE7D,IAAG,eAAU6D,EAAV,YAAsBc,EAAWd,IACpCA,SAAUA,EACVnB,iBAAkBA,EAClBoB,UAAWa,EAAWd,GACtBE,eAAgBa,EAAgBf,MAyCH6B,CAAgBhD,EAAkBuC,EAAMN,WAAYM,EAAML,kBACjF,kBAAC,EAAD,CAAgBlC,iBAAkBA,EAAkBD,OAAQwC,EAAML,oBAGtE,kBAAC,EAAD,CACEhH,OAAQqH,EAAMP,aACd7G,SAAUA,EACVC,cAAesH,EAAiB1C,EAAkBuC,EAAMP,mBC5E1DF,EAAS,CACb,YACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,iBACA,iBACA,OAGWC,EAAe,CAC1BC,aAAcF,EAAO,GACrBtB,WAAY,GACZyB,WAAY,GACZC,gBAAiB,IAGNC,EAAgB,SAACC,GAAD,OAAmBN,EAAOO,QAAQD,IAIlDE,EAAU,SAACC,EAA4BrH,GAClD,IAAMsH,EAAoBL,EAAcI,EAAMP,cAC9C,GAAoB,aAAhB9G,EAAOL,MAA6C,IAAtB2H,EAChC,OAAO,eACFD,EADL,CAEE/B,WAAYtF,EAAOO,KACnBuG,aAAcF,EAAOU,EAAoB,KAI7C,GAAoB,aAAhBtH,EAAOL,KAAqB,CAC9B,IAAMwG,EChCuB,SAACF,EAAkBC,EAAmBZ,GAErE,IAAMyC,EAAsB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAErDxC,EAAgBD,EAAWE,MAAM,IA8BvC,OA5BeU,EACZV,MAAM,IACNC,KAAI,SAACuC,EAAaC,GAGjB,IAAMtC,EAAoBsC,EAAmBF,EAAoB9B,GACjE,OAAI+B,IAAgBzC,EAAcI,IAChCJ,EAAcI,GAAqB,GAC5B,KAGFqC,KAERvC,KAAI,SAACyC,GAIJ,GAAoC,kBAAzBA,EAAmC,CAC5C,IAAMvC,EAAoBJ,EAAc4B,QAAQe,GAChD,OAAIvC,GAAqB,GACvBJ,EAAcI,GAAqB,GAC5B,KAEF,EAET,OAAOuC,KAGGjD,QAAO,SAACC,EAAKC,GAAN,OAAuBD,EAAMC,KDFzBgD,CAAkBb,EAAoB,EAAGtH,EAAOO,KAAM8G,EAAM/B,YACnF,OAAO,eACF+B,EADL,CAEEN,WAAW,GAAD,mBAAMM,EAAMN,YAAZ,CAAwB/G,EAAOO,OACzCyG,gBAAgB,GAAD,mBAAMK,EAAML,iBAAZ,CAA6Bb,IAC5CW,aAAcF,EAAOU,EAAoB,KAI7C,OAAOD,GEvCHE,EAAoB,IAAIzB,MAAM,IAAIC,KAAK,MA+BvCyB,EAAmB,SAAC1C,EAA0BgC,GAClD,IAAMY,EAAaT,EAAcH,GAEjC,MAAO,CAAEnH,KAAM,OAAQC,UADU,IAAf8H,EAAmB5C,EAAmBA,EAAmBrG,EAAmBiJ,EAAa,KAgBvGU,GAVc9I,IAAUO,OAAOL,WAUH,SAAC,GAA0B,IAAxBsF,EAAuB,EAAvBA,iBAAuB,EAChC3E,IAAMyH,WAAWR,EAASP,GADM,mBACnDQ,EADmD,KAC5CpH,EAD4C,KAG1D,OACE,oCACE,2BAAO6C,UAAU,aACf,+BACE,kBAAC,EAAD,CAAUwC,WAAY+B,EAAM/B,aAC3BiC,EAAkB9B,IA/CL,SAACX,EAA0BiC,EAAsBC,GAAjD,OAA+E,SACrGa,EACA5B,GAFqG,OAIrG,kBAAC,EAAD,CAEE7D,IAAG,eAAU6D,EAAV,YAAsBc,EAAWd,IACpCA,SAAUA,EACVnB,iBAAkBA,EAClBoB,UAAWa,EAAWd,GACtBE,eAAgBa,EAAgBf,MAqCH6B,CAAgBhD,EAAkBuC,EAAMN,WAAYM,EAAML,kBACjF,kBAAC,EAAD,CAAgBlC,iBAAkBA,EAAkBD,OAAQwC,EAAML,oBAGtE,kBAAC,EAAD,CACEhH,OAAQqH,EAAMP,aACd7G,SAAUA,EACVC,cAAesH,EAAiB1C,EAAkBuC,EAAMP,mBCzD1DuB,GALc/I,IAAUO,OAAOL,WAKpB,SAAC8I,GAAD,oBAA0BA,KACrCC,EAAgB,SAACD,GAAD,yBAA+BA,IAC/CE,GAAW,SAAC5E,GAAD,MAAoB,CACnCA,QACA,GAAMyE,EAASzE,EAAM6E,cAAcC,QAAQ,IAAK,MAChD,gBAAiBH,EAAc3E,EAAM6E,cAAcC,QAAQ,IAAK,QAE5DC,GAAgB,SAAC/E,GAAD,MAAoB,CACxC,KAAQ,WACR,GAAM2E,EAAc3E,EAAM6E,cAAcC,QAAQ,IAAK,MACrD,kBAAmBL,EAASzE,EAAM6E,cAAcC,QAAQ,IAAK,QAQzDE,GAA6B,SAAC,GAA0B,IAAxB9D,EAAuB,EAAvBA,iBAAuB,EAC3B3E,IAAMC,SAAS,GADY,mBACpDyI,EADoD,KAC1CC,EAD0C,KAE3D,OACE,oCACE,kBAACC,EAAA,EAAD,CAAQ9J,SAAS,SAAS4D,MAAM,WAC9B,kBAACmG,EAAA,EAAD,CACE7E,MAAO0E,EACP7E,SAAU,SAACC,EAA8BgF,GAA/B,OAAoDH,EAAYG,IAC1EC,eAAe,UACfC,UAAU,UACVxG,QAAQ,YACRC,aAAW,2BAEX,kBAACwG,EAAA,EAAQZ,GAAS,cAClB,kBAACY,EAAA,EAAQZ,GAAS,iBAGtB,kBAAC,IAAD,CAAgBa,mBAAiB,EAACC,MAAOT,EAAUU,cAAe,SAACD,GAAD,OAAmBR,EAAYQ,KAC/F,2CAASxG,UAAU,UAAU0G,OAAqB,IAAbX,GAAoBF,GAAc,cACrE,kBAAC,EAAD,CAAU7D,iBAAkBA,KAE9B,2CAAShC,UAAU,UAAU0G,OAAqB,IAAbX,GAAoBF,GAAc,eACrE,kBAAC,EAAD,CAAW7D,iBAAkBA,QCjDvC,SAAS2E,KACP,OACE,8BACE,kBAAC,GAAD,CAAW3E,iBAAkB,KCEf4E,QACW,cAA7B/H,OAAOgI,SAASC,UAEe,UAA7BjI,OAAOgI,SAASC,UAEhBjI,OAAOgI,SAASC,SAASC,MAAM,oDCZnCC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACP,GAAD,OAEF3H,SAASmI,cAAc,UD2InB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAAC7G,GACN8G,QAAQ9G,MAAMA,EAAM+G,c","file":"static/js/main.e71f3bc1.chunk.js","sourcesContent":["/**\n * The guess word lengths. Add with the actual word length to get the value.\n * The position in the array represents the row index.\n */\nexport const GUESS_WORD_LENGTHS = [-4, -3, -3, -3, -3, -2, -2, -2, -1, -1, 0];\n","import Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Fab from '@material-ui/core/Fab';\nimport { createStyles, makeStyles, Theme, useTheme } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Zoom from '@material-ui/core/Zoom';\nimport AddIcon from '@material-ui/icons/Add';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { useEvent } from './use-event.effect';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    fab: {\n      margin: theme.spacing(1),\n      position: 'relative',\n      right: theme.spacing(2),\n    },\n    extendedIcon: {\n      marginRight: theme.spacing(1),\n    },\n  })\n);\n\nconst propTypes = {\n  /** The current action to label the button with. */\n  action: PropTypes.string.isRequired,\n\n  /** Dispatch actions when the word is confirmed. */\n  dispatch: PropTypes.func.isRequired,\n\n  /** Text Field type. */\n  textFieldType: PropTypes.shape({\n    /** Type of the Text Field: text | number */\n    type: PropTypes.string.isRequired,\n\n    /** Max length of the string for type=\"text\". */\n    maxLength: PropTypes.number,\n  }).isRequired,\n};\n\ntype props = PropTypes.InferProps<typeof propTypes>;\n\n/**\n * <ActionButton /> draws the floating action button for the user to perform the main interaction.\n * Clicking on the button will display an input modal to either either a word, or score.\n *\n * @returns {object} - I don't know yet.\n */\nconst ActionButton: React.FC<props> = ({ action, dispatch, textFieldType }) => {\n  const [openDialog, setOpenDialog] = React.useState(false);\n  const [word, setWord] = React.useState('');\n  const [wordLengthError, setWordLengthError] = React.useState(true);\n  const [score, setScore] = React.useState(0);\n\n  const color = 'primary';\n  const theme = useTheme();\n  const classes = useStyles();\n  const inValue = true; // value === index. When Tab index equals fab index?\n  const transitionDuration = {\n    enter: theme.transitions.duration.enteringScreen,\n    exit: theme.transitions.duration.leavingScreen,\n  };\n\n  // Scroll to the dialog input when mobile keyboard resizes the window\n  const [hasFocus, setHasFocus] = React.useState(false);\n  const [hasResize, setHasResize] = React.useState(false);\n  useEvent('resize', () => setHasResize(true));\n  React.useEffect(() => {\n    if (hasFocus && hasResize) {\n      document?.activeElement?.scrollIntoView({ behavior: 'smooth', block: 'center' });\n      setHasFocus(false);\n      setHasResize(false);\n    }\n  }, [hasFocus, hasResize]);\n\n  const handleConfirmDialog = () => {\n    textFieldType.type === 'text' ? dispatch({ type: 'SET_WORD', word }) : dispatch({ type: 'SET_SCORE', score });\n    setOpenDialog(false);\n  };\n\n  const onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (textFieldType.type === 'text') {\n      setWord(event.target.value.toUpperCase());\n      setWordLengthError(event.target.value.length !== textFieldType.maxLength);\n    } else if (textFieldType.type === 'number') {\n      setScore(Number.parseInt(event.target.value, 10));\n    }\n  };\n\n  return (\n    <>\n      {action !== 'END' && (\n        <Zoom\n          key={color}\n          in={inValue}\n          timeout={transitionDuration}\n          style={{ transitionDelay: `${inValue ? transitionDuration.exit : 0}ms` }}\n          unmountOnExit\n        >\n          <Fab\n            variant=\"extended\"\n            aria-label={`+ ${action}`}\n            color={color}\n            className={classes.fab}\n            onClick={() => setOpenDialog(true)}\n          >\n            <AddIcon className={classes.extendedIcon} /> {action}\n          </Fab>\n        </Zoom>\n      )}\n      <Dialog open={openDialog} onClose={() => setOpenDialog(false)} aria-labelledby=\"form-dialog-title\">\n        <DialogTitle id=\"form-dialog-title\">Add {action}</DialogTitle>\n        <DialogContent>\n          <TextField\n            id=\"word\"\n            margin=\"dense\"\n            autoComplete=\"off\"\n            autoFocus\n            fullWidth\n            error={wordLengthError}\n            label={action}\n            type={textFieldType.type}\n            inputProps={textFieldType.maxLength ? { maxLength: textFieldType.maxLength } : undefined}\n            helperText={textFieldType.maxLength ? `Word Length ${textFieldType.maxLength}` : ''}\n            onChange={onChange}\n            onFocus={() => setHasFocus(true)}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setOpenDialog(false)} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={handleConfirmDialog} color=\"primary\">\n            OK\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n};\n\nActionButton.propTypes = propTypes;\n\nexport { ActionButton };\n","import { useEffect } from 'react';\n\n/**\n * window.addEventListener(type, listener, options);\n *\n * @param {string} type - A case-sensitive string representing the event type to listen for. https://developer.mozilla.org/en-US/docs/Web/Events\n * @param {*} listener - callback to call when an event of the specified type occurs.\n * @param {*} options - {capture, once, passive}\n */\nexport const useEvent = (\n  type: string,\n  listener: EventListenerOrEventListenerObject,\n  options?: AddEventListenerOptions\n) => {\n  useEffect(() => {\n    // initiate the event handler\n    window.addEventListener(type, listener, options);\n\n    // this will clean up the event every time the component is re-rendered\n    return function cleanup() {\n      window.removeEventListener(type, listener);\n    };\n  });\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nconst propTypes = {\n  /** The score for each guess word. */\n  scores: PropTypes.arrayOf(PropTypes.number.isRequired).isRequired,\n\n  /** The max length of the Actual Word. */\n  actualWordLength: PropTypes.number.isRequired,\n};\n\ntype props = PropTypes.InferProps<typeof propTypes>;\n\n/**\n * <FinalScoreRows /> displays the bonus and final score rows.\n *\n * @returns {object} - a bunch of <span> tags\n */\nconst FinalScoreRows: React.FC<props> = ({ scores, actualWordLength }) => {\n  const bonusScore = scores[scores.length - 1] === actualWordLength * 1000 ? 3000 : 0;\n  const finalScore = scores.reduce((sum, currentValue) => sum + currentValue, 0);\n\n  return (\n    <>\n      <tr>\n        <td colSpan={actualWordLength}>Bonus Points:</td>\n        <td>{bonusScore}</td>\n      </tr>\n      <tr>\n        <td colSpan={actualWordLength}>Final Score:</td>\n        <td>{finalScore}</td>\n      </tr>\n      <span />\n    </>\n  );\n};\n\nFinalScoreRows.propTypes = propTypes;\n\nexport { FinalScoreRows };\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nconst propTypes = {\n  /** The Actual Word. */\n  actualWord: PropTypes.string,\n};\n\ntype props = PropTypes.InferProps<typeof propTypes>;\n\n/**\n * <GameWord /> displays either the Actual Word for Your Word, or controls to guess Their Word.\n *\n * @returns {object} - a bunch of <span> tags\n */\nconst GameWord: React.FC<props> = ({ actualWord }) => {\n  const actualLetters = actualWord?.split('');\n\n  return (\n    <tr>\n      {actualLetters?.map((actualLetter, actualLetterIndex) => (\n        <td key={`actual-${actualLetterIndex}`}>{actualLetter}</td>\n      ))}\n    </tr>\n  );\n};\n\nGameWord.propTypes = propTypes;\n\nexport { GameWord };\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport '../../index.css';\n\n/**\n * Returns an array to be deconstructed as [before, after].\n * `before` is the number of empty spaces before the letters.\n * `after` is the number of empty spaces after the letters.\n *\n * @param {number} rowIndex - Guess Word row index.\n * @returns {number[]} - number of cells [before, after] the letters.\n */\nconst getNumberOfEmptyCells = (rowIndex: number) => {\n  return [\n    [0, 4],\n    [0, 3],\n    [1, 2],\n    [2, 1],\n    [3, 0],\n    [2, 0],\n    [1, 1],\n    [0, 2],\n    [0, 1],\n    [1, 0],\n    [0, 0],\n  ][rowIndex];\n};\n\nconst emptyCell = <span>&nbsp;</span>;\nconst getEmptyCells = (length: number) => new Array(length).fill(emptyCell);\n\nconst propTypes = {\n  /** The row index of the Guess Word. */\n  rowIndex: PropTypes.number.isRequired,\n\n  /** The max length of the Actual Word. */\n  actualWordLength: PropTypes.number.isRequired,\n\n  /** The Guess Word. */\n  guessWord: PropTypes.string,\n\n  /** The Guess Word Score. */\n  guessWordScore: PropTypes.number,\n};\n\ntype props = PropTypes.InferProps<typeof propTypes>;\n\n/**\n * <GuessWordRow /> displays the letters of the guess word in individual <span> tags with grid-area styles.\n *\n * @returns {object} - a bunch of <span> tags\n */\nconst GuessWordRow: React.FC<props> = ({ actualWordLength, rowIndex, guessWord, guessWordScore }) => {\n  const [before, after] = getNumberOfEmptyCells(rowIndex);\n  const letters = getEmptyCells(before)\n    .concat(guessWord?.split('') || getEmptyCells(actualWordLength - after))\n    .concat(getEmptyCells(after));\n\n  const isGuessLetter = (letterIndex: number) => before <= letterIndex && letterIndex < actualWordLength - after;\n\n  return (\n    <tr>\n      {letters.map((letter: string, letterIndex: number) => {\n        const key = `letter-${rowIndex}-${letterIndex}`;\n        return (\n          <td key={key} className={isGuessLetter(letterIndex) ? 'guessLetter' : undefined}>\n            {letter || emptyCell}\n          </td>\n        );\n      })}\n      <td>{guessWordScore}</td>\n    </tr>\n  );\n};\n\nGuessWordRow.propTypes = propTypes;\n\nexport { GuessWordRow };\n","const stages = [\n  'Your Guess 1',\n  'Your Score 1',\n  'Your Guess 2',\n  'Your Score 2',\n  'Your Guess 3',\n  'Your Score 3',\n  'Your Guess 4',\n  'Your Score 4',\n  'Your Guess 5',\n  'Your Score 5',\n  'Your Guess 6',\n  'Your Score 6',\n  'Your Guess 7',\n  'Your Score 7',\n  'Your Guess 8',\n  'Your Score 8',\n  'Your Guess 9',\n  'Your Score 9',\n  'Your Guess 10',\n  'Your Score 10',\n  'Your Guess 11',\n  'Your Score 11',\n  'END',\n];\n\nexport const initialState = {\n  currentStage: stages[0],\n  actualWord: '',\n  guessWords: [] as string[],\n  guessWordScores: [] as number[],\n};\n\nexport const getStageIndex = (stage: string) => stages.indexOf(stage);\n\ntype actions = { type: 'SET_WORD'; word: string } | { type: 'SET_SCORE'; score: number };\n\nexport const reducer = (state: typeof initialState, action: actions): typeof initialState => {\n  const currentStageIndex = getStageIndex(state.currentStage);\n  if (action.type === 'SET_WORD') {\n    return {\n      ...state,\n      guessWords: [...state.guessWords, action.word],\n      currentStage: stages[currentStageIndex + 1],\n    };\n  }\n\n  if (action.type === 'SET_SCORE') {\n    return {\n      ...state,\n      guessWordScores: [...state.guessWordScores, action.score],\n      currentStage: stages[currentStageIndex + 1],\n    };\n  }\n\n  return state;\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport '../../index.css';\nimport { GUESS_WORD_LENGTHS } from '../../services/grid-template.service';\nimport { ActionButton } from '../ActionButton';\nimport { FinalScoreRows } from '../FinalScoreRows';\nimport { GameWord } from '../GameWord';\nimport { GuessWordRow } from '../GuessWordRow';\nimport { getStageIndex, initialState, reducer } from './reducer';\n\nconst NUMBER_OF_GUESSES = new Array(11).fill(null);\n\n/**\n * Get the <GuessWordRow /> component.\n *\n * @param {number} actualWordLength - The max length of the Actual Word.\n * @param {string[]} guessWords - List of guess words.\n * @param {number[]} guessWordScores - List of scores for the guess word.\n * @returns {object} - <GuessWordRow />\n */\nconst getGuessWordRow = (actualWordLength: number, guessWords: string[], guessWordScores: number[]) => (\n  _: any,\n  rowIndex: number\n) => (\n  <GuessWordRow\n    /* eslint-disable-next-line react/no-array-index-key*/\n    key={`word-${rowIndex}-${guessWords[rowIndex]}`}\n    rowIndex={rowIndex}\n    actualWordLength={actualWordLength}\n    guessWord={guessWords[rowIndex]}\n    guessWordScore={guessWordScores[rowIndex]}\n  />\n);\n\n/**\n * Get the `textFieldType` prop for <ActionButton />.\n *\n * @param {number} actualWordLength - The max length of the Actual Word.\n * @param {string} currentStage - The current game stage for the <ActionButton />\n * @returns {object} - {type, maxLength}\n */\nconst getTextFieldType = (actualWordLength: number, currentStage: string) => {\n  if (currentStage.includes('Your Guess')) {\n    const stageIndex = getStageIndex(currentStage);\n    const maxLength = actualWordLength + GUESS_WORD_LENGTHS[stageIndex / 2];\n    return { type: 'text', maxLength };\n  }\n\n  return { type: 'number' };\n};\n\nconst propTypes = {\n  /** The max length of the Actual Word. */\n  actualWordLength: PropTypes.number.isRequired,\n};\n\ntype props = PropTypes.InferProps<typeof propTypes>;\n\n/**\n * <TheirWord /> allows the user to view and manage your guesses of their actual word.\n *\n * @returns {object} - I don't know yet.\n */\nconst TheirWord: React.FC<props> = ({ actualWordLength }) => {\n  const [state, dispatch] = React.useReducer(reducer, initialState);\n\n  return (\n    <>\n      <table className=\"gameTable\">\n        <tbody>\n          <GameWord actualWord=\"------\" />\n          {NUMBER_OF_GUESSES.map(getGuessWordRow(actualWordLength, state.guessWords, state.guessWordScores))}\n          <FinalScoreRows actualWordLength={actualWordLength} scores={state.guessWordScores} />\n        </tbody>\n      </table>\n      <ActionButton\n        action={state.currentStage}\n        dispatch={dispatch}\n        textFieldType={getTextFieldType(actualWordLength, state.currentStage)}\n      />\n    </>\n  );\n};\n\nTheirWord.propTypes = propTypes;\n\nexport { TheirWord };\n","import { getGuessWordScore } from './services/guess-word-scorer.service';\n\nconst stages = [\n  'Your Word',\n  'Their Guess 1',\n  'Their Guess 2',\n  'Their Guess 3',\n  'Their Guess 4',\n  'Their Guess 5',\n  'Their Guess 6',\n  'Their Guess 7',\n  'Their Guess 8',\n  'Their Guess 9',\n  'Their Guess 10',\n  'Their Guess 11',\n  'END',\n];\n\nexport const initialState = {\n  currentStage: stages[0],\n  actualWord: '',\n  guessWords: [] as string[],\n  guessWordScores: [] as number[],\n};\n\nexport const getStageIndex = (stage: string) => stages.indexOf(stage);\n\ntype actions = { type: 'SET_WORD'; word: string };\n\nexport const reducer = (state: typeof initialState, action: actions): typeof initialState => {\n  const currentStageIndex = getStageIndex(state.currentStage);\n  if (action.type === 'SET_WORD' && currentStageIndex === 0) {\n    return {\n      ...state,\n      actualWord: action.word,\n      currentStage: stages[currentStageIndex + 1],\n    };\n  }\n\n  if (action.type === 'SET_WORD') {\n    const guessWordScore = getGuessWordScore(currentStageIndex - 1, action.word, state.actualWord);\n    return {\n      ...state,\n      guessWords: [...state.guessWords, action.word],\n      guessWordScores: [...state.guessWordScores, guessWordScore],\n      currentStage: stages[currentStageIndex + 1],\n    };\n  }\n\n  return state;\n};\n","/**\n * Get the score of the Guess Word.\n *\n * @param {number} rowIndex - Row index of the Guess Word.\n * @param {string} guessWord - Guess Word\n * @param {string} actualWord - Actual Word\n * @returns {number} - Score of the Guess Word.\n */\nexport const getGuessWordScore = (rowIndex: number, guessWord: string, actualWord: string): number => {\n  /** The guess word start index. The position in array represents the row index. */\n  const guessWordStartIndex = [0, 0, 1, 2, 3, 2, 1, 0, 0, 1, 0];\n\n  const actualLetters = actualWord.split('');\n\n  const scores = guessWord\n    .split('')\n    .map((guessLetter, guessLetterIndex): string | number => {\n      // if exact match, then replace letter with 1000\n      // and blank corresponding letter in `actualLetters`\n      const actualLetterIndex = guessLetterIndex + guessWordStartIndex[rowIndex];\n      if (guessLetter === actualLetters[actualLetterIndex]) {\n        actualLetters[actualLetterIndex] = '';\n        return 1000;\n      }\n\n      return guessLetter;\n    })\n    .map((remainingGuessLetter): number => {\n      // if remaining match, then replace letter with 250\n      // and blank corresponding letter in `actualLetters`\n      // else replace letter with 0\n      if (typeof remainingGuessLetter === 'string') {\n        const actualLetterIndex = actualLetters.indexOf(remainingGuessLetter);\n        if (actualLetterIndex >= 0) {\n          actualLetters[actualLetterIndex] = '';\n          return 250;\n        }\n        return 0;\n      }\n      return remainingGuessLetter;\n    });\n\n  return scores.reduce((sum, currentValue) => sum + currentValue);\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport '../../index.css';\nimport { GUESS_WORD_LENGTHS } from '../../services/grid-template.service';\nimport { ActionButton } from '../ActionButton';\nimport { FinalScoreRows } from '../FinalScoreRows';\nimport { GameWord } from '../GameWord';\nimport { GuessWordRow } from '../GuessWordRow';\nimport { getStageIndex, initialState, reducer } from './reducer';\n\nconst NUMBER_OF_GUESSES = new Array(11).fill(null);\n\n/**\n * Get the <GuessWordRow /> component.\n *\n * @param {number} actualWordLength - The max length of the Actual Word.\n * @param {string[]} guessWords - List of guess words.\n * @param {number[]} guessWordScores - List of scores for the guess word.\n * @returns {object} - <GuessWordRow />\n */\nconst getGuessWordRow = (actualWordLength: number, guessWords: string[], guessWordScores: number[]) => (\n  _: any,\n  rowIndex: number\n) => (\n  <GuessWordRow\n    /* eslint-disable-next-line react/no-array-index-key*/\n    key={`word-${rowIndex}-${guessWords[rowIndex]}`}\n    rowIndex={rowIndex}\n    actualWordLength={actualWordLength}\n    guessWord={guessWords[rowIndex]}\n    guessWordScore={guessWordScores[rowIndex]}\n  />\n);\n\n/**\n * Get the `textFieldType` prop for <ActionButton />.\n *\n * @param {number} actualWordLength - The max length of the Actual Word.\n * @param {string} currentStage - The current game stage for the <ActionButton />\n * @returns {object} - {type, maxLength}\n */\nconst getTextFieldType = (actualWordLength: number, currentStage: string) => {\n  const stageIndex = getStageIndex(currentStage);\n  const maxLength = stageIndex === 0 ? actualWordLength : actualWordLength + GUESS_WORD_LENGTHS[stageIndex - 1];\n  return { type: 'text', maxLength };\n};\n\nconst propTypes = {\n  /** The max length of the Actual Word. */\n  actualWordLength: PropTypes.number.isRequired,\n};\n\ntype props = PropTypes.InferProps<typeof propTypes>;\n\n/**\n * <YourWord /> allows the user to view and manage their guesses of your actual word.\n *\n * @returns {object} - I don't know yet.\n */\nconst YourWord: React.FC<props> = ({ actualWordLength }) => {\n  const [state, dispatch] = React.useReducer(reducer, initialState);\n\n  return (\n    <>\n      <table className=\"gameTable\">\n        <tbody>\n          <GameWord actualWord={state.actualWord} />\n          {NUMBER_OF_GUESSES.map(getGuessWordRow(actualWordLength, state.guessWords, state.guessWordScores))}\n          <FinalScoreRows actualWordLength={actualWordLength} scores={state.guessWordScores} />\n        </tbody>\n      </table>\n      <ActionButton\n        action={state.currentStage}\n        dispatch={dispatch}\n        textFieldType={getTextFieldType(actualWordLength, state.currentStage)}\n      />\n    </>\n  );\n};\n\nYourWord.propTypes = propTypes;\n\nexport { YourWord };\n","import AppBar from '@material-ui/core/AppBar';\nimport Tab from '@material-ui/core/Tab';\nimport Tabs from '@material-ui/core/Tabs';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport SwipeableViews from 'react-swipeable-views';\nimport '../../index.css';\nimport { TheirWord } from '../TheirWord';\nimport { YourWord } from '../YourWord';\n\nconst propTypes = {\n  /** The max length of the Actual Word. */\n  actualWordLength: PropTypes.number.isRequired,\n};\n\ntype props = PropTypes.InferProps<typeof propTypes>;\n\nconst getTabId = (panel: string) => `tab-${panel}`;\nconst getTabPanelId = (panel: string) => `tabpanel-${panel}`;\nconst tabProps = (label: string) => ({\n  label,\n  'id': getTabId(label.toLowerCase().replace(' ', '-')),\n  'aria-controls': getTabPanelId(label.toLowerCase().replace(' ', '-')),\n});\nconst tabPanelProps = (label: string) => ({\n  'role': 'tabpanel',\n  'id': getTabPanelId(label.toLowerCase().replace(' ', '-')),\n  'aria-labelledby': getTabId(label.toLowerCase().replace(' ', '-')),\n});\n\n/**\n * <TabPanels /> displays the tabs and the panels to navigate between <YourWord /> and <TheirWord />.\n *\n * @returns {object} - I don't know yet.\n */\nconst TabPanels: React.FC<props> = ({ actualWordLength }) => {\n  const [tabValue, setTabValue] = React.useState(0);\n  return (\n    <>\n      <AppBar position=\"static\" color=\"default\">\n        <Tabs\n          value={tabValue}\n          onChange={(event: React.ChangeEvent<{}>, newValue: number) => setTabValue(newValue)}\n          indicatorColor=\"primary\"\n          textColor=\"primary\"\n          variant=\"fullWidth\"\n          aria-label=\"full width tabs example\"\n        >\n          <Tab {...tabProps('Your Word')} />\n          <Tab {...tabProps('Their Word')} />\n        </Tabs>\n      </AppBar>\n      <SwipeableViews enableMouseEvents index={tabValue} onChangeIndex={(index: number) => setTabValue(index)}>\n        <section className=\"gameTab\" hidden={tabValue !== 0} {...tabPanelProps('Your Word')}>\n          <YourWord actualWordLength={actualWordLength} />\n        </section>\n        <section className=\"gameTab\" hidden={tabValue !== 1} {...tabPanelProps('Their Word')}>\n          <TheirWord actualWordLength={actualWordLength} />\n        </section>\n      </SwipeableViews>\n    </>\n  );\n};\n\nTabPanels.propTypes = propTypes;\n\nexport { TabPanels };\n","import React from 'react';\nimport { TabPanels } from './components/TabPanels';\n\n/**\n * App component.\n *\n * @returns {object} - <App />\n */\nfunction App() {\n  return (\n    <main>\n      <TabPanels actualWordLength={6} />\n    </main>\n  );\n}\n\nexport { App };\n","/* eslint-disable no-console */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4]\\d|[01]?\\d{1,2})){3}$/)\n);\n\n/**\n * @typedef Config\n */\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\n/**\n * @param {string} swUrl - service worker url\n * @param {string} config - config\n */\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    /* eslint-disable-next-line */\n    .then((registration) => {\n      /* eslint-disable-next-line no-param-reassign */\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\n/**\n * @param {string} swUrl - service worker url\n * @param {string} config - config\n */\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && !contentType.includes('javascript'))) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\n/**\n * @param {Config} config - config\n */\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\n/**\n *\n */\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.querySelector('#root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}